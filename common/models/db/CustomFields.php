<?php

namespace common\models\db;

use common\classes\Debug;
use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\Html;

/**
 * This is the model class for table "custom_fields".
 *
 * @property integer $id
 * @property string $label
 * @property string $slug
 * @property string $type
 * @property string $valid
 * @property string $error_msg
 * @property integer $is_main
 * @property string $default_value
 * @property string $placeholder
 * @property integer $sort
 * @property integer $is_required
 * @property integer $pattern_id
 *
 * @property FieldVariations[] $fieldVariations
 * @property ReportTypeCustomFields[] $reportTypeCustomFields
 * @property ReportType[] $reportTypes
 */
class CustomFields extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'custom_fields';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['label', 'slug'], 'required'],
            [['type'], 'string'],
            [['is_main', 'sort', 'is_required', 'pattern_id'], 'integer'],
            [['label', 'slug', 'valid', 'default_value', 'placeholder','error_msg'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'label' => 'Имя',
            'slug' => 'Ярлык',
            'type' => 'Тип',
            'valid' => 'Свое правило',
            'error_msg' => 'Сообщение при ошибке',
            'pattern_id' => 'Правила валидации',
            'is_main' => 'Основное',
            'is_required' => 'Обязательное',
            'default_value' => 'Значение по умолчанию',
            'placeholder' => 'Placeholder',
            'sort' => 'Приоритет',
        ];
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
        if ($this->isSelectable()) {
            FieldVariations::deleteAll(['field_id' => $this->id]);
            $variations = self::getVariationArray(Yii::$app->request->post('variations'));
            foreach ($variations as $key => $variation) {
                $fv = new FieldVariations();
                $fv->field_id = $this->id;
                $fv->variation_key = $key;
                $fv->variation_title = $variation;
                $fv->save();
            }
        }
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getFieldVariations()
    {
        return $this->hasMany(FieldVariations::className(), ['field_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getReportTypeCustomFields()
    {
        return $this->hasMany(ReportTypeCustomFields::className(), ['custom_fields_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getReportTypes()
    {
        return $this->hasMany(ReportType::className(),
            ['id' => 'report_type_id'])->viaTable('report_type_custom_fields', ['custom_fields_id' => 'id']);
    }

    public static function getVariationArray($str)
    {
        $arr = [];
        foreach (explode(',', $str) as $item) {
            $kv = explode('=', $item);
            $arr[$kv[0]] = $kv[1];
        }
        return $arr;
    }

    public function getVariationStr()
    {
        $str = '';
        $fv = FieldVariations::find()->where(['field_id' => $this->id])->all();
        foreach ($fv as $item) {
            $str .= $item->variation_key . '=' . $item->variation_title . ',';
        }
        return substr($str, 0, -1);
    }

    public function isSelectable()
    {
        return $this->type === 'select' || $this->type === 'radio' || $this->type === 'checkbox';
    }

    public static function getFields()
    {
        return self::find()->where(['is_main' => 0])->all();
    }

    public function printField($value = false)
    {
        $html = Html::label($this->label, $this->slug, ['class' => 'control-label']);
        $v = $value ?: $this->default_value;
        if ($this->type === 'text') {
            $options = [
                'class' => 'form-control vItem',
                'id' => $this->slug,
                'placeholder' => $this->placeholder,
            ];
            if($this->is_required === 1){
                $options['required'] = 'required';
            }
            if(!empty($this->valid)){
                $options['pattern'] = $this->valid;
            }
            if($this->pattern_id !== 0){
                $options['pattern'] = Validate::getPatternById($this->pattern_id);
            }
            if(!empty($this->error_msg)){
                $options['data-msg'] = $this->error_msg;
            }
            $html .= Html::textInput('CF[' . $this->slug . ']', $v, $options);
        }
        if ($this->type === 'textarea') {
            $options = [
                'class' => 'form-control vItem',
                'id' => $this->slug,
                'placeholder' => $this->placeholder,
            ];
            if($this->is_required === 1){
                $options['required'] = 'required';
            }
            if(!empty($this->valid)){
                $options['pattern'] = $this->valid;
            }
            if($this->pattern_id !== 0){
                $options['pattern'] = Validate::getPatternById($this->pattern_id);
            }
            if(!empty($this->error_msg)){
                $options['data-msg'] = $this->error_msg;
            }
            $html .= Html::textarea('CF[' . $this->slug . ']', $v, $options);
        }
        if ($this->type === 'select') {
            $html .= Html::dropDownList(
                'CF[' . $this->slug . ']',
                $v,
                ArrayHelper::map($this->getFieldVariations()->all(), 'variation_key', 'variation_title'),
                [
                    'class' => 'form-control vItem',
                    'id' => $this->slug,
                    'placeholder' => $this->placeholder,
                ]);
        }
        if ($this->type === 'radio') {
            foreach ($this->getFieldVariations()->all() as $item) {
                $options = [
                    'value' => $item->variation_key,
                    'class' => 'vItem'
                ];
                if($this->is_required === 1){
                    $options['required'] = 'required';
                }
                $options['data-msg'] = !empty($this->error_msg) ? $this->error_msg : 'Ошибка в заполнении';
                $options['data-box'] = '#msg_box_'.$this->slug;
                $html .= '<br>' . $item->variation_title . ' ';
                $html .= Html::radio('CF[' . $this->slug . ']', $item->variation_key === $v,
                    $options);
            }
            $html .= '<div id="msg_box_'.$this->slug.'"></div>';

        }
        if ($this->type === 'checkbox') {
            if (self::isJson($v)) {
                $v = json_decode($v);
            }
            if($v === null){
                $v = [];
            }
            foreach ($this->getFieldVariations()->all() as $item) {
                $html .= '<br>' . $item->variation_title . ' ';
                $html .= Html::checkbox('CF[' . $this->slug . '][]', in_array($item->variation_key, $v, true),
                    ['value' => $item->variation_key]);
            }

        }
        return $html . '<br>';
    }

    public static function isJson($string)
    {
        json_decode($string);
        return (json_last_error() == JSON_ERROR_NONE);
    }
}

